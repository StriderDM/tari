syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "transaction.proto";
import "types.proto";

package tari.core;

// The BlockHeader contains all the metadata for the block, including proof of work, a link to the previous block
// and the transaction kernels.
message BlockHeader {
    // Version of the block
    uint32 version = 1;
    // Height of this block since the genesis block (height 0)
    uint64 height = 2;
    // Hash of the block previous to this in the chain.
    bytes prev_hash = 4;
    // Timestamp at which the block was built.
    google.protobuf.Timestamp timestamp = 5;
    // This is the UTXO merkle root of the outputs
    // This is calculated as Hash (txo MMR root  || roaring bitmap hash of UTXO indices)
    bytes output_mr = 6;
    // This is the MMR root of the range proofs
    bytes range_proof_mr = 7;
    // This is the MMR root of the kernels
    bytes kernel_mr = 8;
    // Total accumulated sum of kernel offsets since genesis block. We can derive the kernel offset sum for *this*
    // block from the total kernel offset of the previous block header.
    bytes total_kernel_offset = 9;
    // Total accumulated difficulty since genesis block
    uint64 total_difficulty = 10;
    // Nonce increment used to mine this block.
    uint64 nonce = 11;
}

// A Tari block. Blocks are linked together into a blockchain.
message Block {
    BlockHeader header = 1;
    tari.types.AggregateBody body = 2;
}

// The representation of a historical block in the blockchain. It is essentially identical to a protocol-defined
// block but contains some extra metadata that clients such as Block Explorers will find interesting.
message HistoricalBlock {
    // The number of blocks that have been mined since this block, including this one. The current tip will have one
    // confirmation.
    uint64 confirmations = 1;
    // An array of commitments of the outputs from this block that have subsequently been spent.
    repeated tari.types.Commitment spent_commitments = 2;
    // The underlying block
    Block block = 3;
}
